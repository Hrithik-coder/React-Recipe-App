{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","src","alt","map","text","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getrecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","placeholder","type","value","onChange","target","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAoBeA,EAjBA,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,MAAMC,EAAgC,EAAhCA,SAASC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,YAClC,OACG,sBAAKC,UAAU,UAAf,UACK,qBAAKC,IAAKH,EAAOI,IAAI,MACtB,6BAAKN,IACL,0CAAaC,KACb,qBAAKG,UAAU,OAAf,SACA,6BACKD,EAAYI,KAAI,SAAAJ,GAAW,OACxB,6BAAKA,EAAYK,kBCyCrBC,MAjDf,WAEE,IAGA,EAA6BC,mBAAS,IAAtC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA2BF,mBAAS,IAApC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAyBJ,mBAAS,WAAlC,mBAAOK,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WACPC,MACD,CAACH,IAEH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAZjB,WAYiB,oBAXhB,qCAUK,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAgBhB,OACE,sBAAKpB,UAAU,MAAf,UACC,uBAAMuB,SAPS,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,IAKmBT,UAAU,cAArC,UACE,uBAAOA,UAAU,eAAe0B,YAAY,sBAAsBC,KAAK,OAAOC,MAAOnB,EAAQoB,SAZ7E,SAAAL,GACnBd,EAAUc,EAAEM,OAAOF,UAYhB,wBAAQ5B,UAAU,gBAAgB2B,KAAK,SAAvC,uBAEF,qBAAK3B,UAAU,eAAf,SACCO,EAAQJ,KAAI,SAAA4B,GAAM,OACjB,cAAC,EAAD,CAEAnC,MAAOmC,EAAOA,OAAOC,MACrBnC,SAAUkC,EAAOA,OAAOlC,SACxBC,MAAOiC,EAAOA,OAAOjC,MACrBC,YAAagC,EAAOA,OAAOhC,aAJtBgC,EAAOA,OAAOC,gBC9BXC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9d521571.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nconst Recipe = ({title,calories,image,ingredients}) => {\r\n    return (\r\n       <div className=\"content\">\r\n            <img src={image} alt=\" \"></img>\r\n           <h1>{title}</h1>\r\n           <p>Calories:{calories}</p>\r\n           <div className=\"list\">\r\n           <ol>\r\n               {ingredients.map(ingredients => (\r\n                   <li>{ingredients.text}</li>\r\n               ))}\r\n           </ol>\r\n           </div>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React,{useEffect,useState} from \"react\";\nimport Recipe from \"./Recipe\";\nimport './App.css';\n\nfunction App() {\n\n  const APP_ID='978844f2';\n  const APP_KEY='97f2ca13cbbde608d18dcdbbcb7443c8';\n\n  const [recipes,setRecipes] = useState([]);\n  const [search,setSearch] = useState('');\n  const [query,setQuery] = useState('chicken')\n  \n  useEffect(() =>{\n     getrecipes();\n  },[query]);\n\n  const getrecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  }\n\n  const updatesearch = e =>{\n    setSearch(e.target.value);\n  }\n\n  const getsearch = e => {\n    e.preventDefault();\n    setQuery(search);\n  }\n\n  return (\n    <div className=\"App\">\n     <form onSubmit={getsearch} className='search-form'>\n       <input className='search-input' placeholder=\"Enter the Item Name\" type='text' value={search} onChange={updatesearch}></input>\n       <button className='search-button' type='submit'>search</button>\n     </form>\n     <div className=\"infor-mation\">\n     {recipes.map(recipe => (\n       <Recipe \n       key={recipe.recipe.label}\n       title={recipe.recipe.label} \n       calories={recipe.recipe.calories} \n       image={recipe.recipe.image}\n       ingredients={recipe.recipe.ingredients} />\n     ))}\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}